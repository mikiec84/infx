% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json.R
\name{as_json_class}
\alias{as_json_class}
\alias{as_json_list}
\alias{has_json_class}
\alias{is_json_class}
\alias{[.json_class}
\alias{print.json_class}
\title{Create JSON class}
\usage{
as_json_class(x)

as_json_list(x)

has_json_class(x, class = NULL)

is_json_class(x)

\method{[}{json_class}(x, i, ...)

\method{print}{json_class}(x, depth = 1L, width = getOption("width"),
  length = 100L, fancy = TRUE, ...)
}
\arguments{
\item{x}{Object to process.}

\item{class}{(Optional) class name to test.}

\item{i}{Sub-setting information.}

\item{...}{Generic compatibility.}

\item{depth}{The maximum recursion depth.}

\item{width}{Number of columns to maximally print.}

\item{length}{Number of lines to maximally print.}

\item{fancy}{Logical switch to enable font styles, colors and UTF box
characters.}

\item{x}{Object to process.}
}
\value{
The modified object used as input.

The modified object used as input.

A single logical.

A single logical.

The subsetted object.

The input object (invisibly).
}
\description{
To communicate object type information via JSON to the
Jackson-powered openBis interface, the "@type" field is used. Furthermore,
the "@id" field is used by the json-rpc specification to map requests in
async scenarios. Data received from openBis is stripped of both "@type" and
"@id" and the type information is saved as class attribute. Such
objects also have the class "json_class" added.

Removes both the "json_class" class and the JSON class itself,
which is written to an "@type" filed. This action is recursively applied to
lists.

Either tests whether an object has any JSON class attached or
a specific one.

Tests whether an object inherits from "json_class". Throws a
warning if the "json_class" class attribute is not in the second position
of the class vector.

Custom sub-setting of JSON objects that preserve class and
"json_class" attributes. This is useful when objects are created from
openBIS results which are subsequently used in further queries, but the
constructors they are passed to require only a subset of the fetched fields.

Prints a JSON object stored as a possibly nested list
structure. The JSON objects themselves are rendered as nodes and will be
traversed recursively up to the specified depth. Furthermore, the maximum
width (number of columns printed) and length (number of lines printed) may
be specified.
}
