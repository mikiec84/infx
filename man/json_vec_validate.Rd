% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json-vec.R
\name{is_json_vec}
\alias{is_json_vec}
\alias{is.json_vec}
\alias{has_common_subclass}
\alias{get_common_subclass}
\alias{get_common_subclass.json_class}
\alias{get_common_subclass.list}
\alias{get_common_subclass.json_vec}
\alias{get_common_subclass.default}
\title{Validate JSON object vectors}
\usage{
is_json_vec(x)

is.json_vec(x)

has_common_subclass(x)

get_common_subclass(x, ...)

\method{get_common_subclass}{json_class}(x, ...)

\method{get_common_subclass}{list}(x, ...)

\method{get_common_subclass}{json_vec}(x, ...)

\method{get_common_subclass}{default}(x, ...)
}
\arguments{
\item{x}{A single/list of \code{json_class} object(s), or other object to coerce}

\item{...}{Individual \code{json_class} objects, or generic compatibility}
}
\description{
The function \code{is_json_vec()} and its alias \code{is.json_vec()} can be used to
test whether an object is a proper \code{json_vec} object. This requires that
\itemize{
\item all child elements have to be of the same sub-class
\item all child elements are required to be properly formed \code{json_class}
objects
\item the \code{json_vec} class attribute has to be in last position
\item the remaining class attributes have to be equal to the common sub-class
determined for the children.
}
}
\details{
Testing whether a list structure consists of \code{json_class} objects which are
of the same sub-class can be done with \code{has_common_subclass()} and this
shared sub-class can be extracted, using the S3 generic function
\code{get_common_subclass()}.
}
\examples{
a <- structure(list("a"), class = c("foo", "json_class"))
b <- structure(list("b"), class = c("foo", "json_class"))

vec <- json_vec(a, b)

is_json_vec(vec)
is_json_vec(a)

has_common_subclass(vec)
get_common_subclass(vec)

}
