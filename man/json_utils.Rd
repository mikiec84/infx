% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json-class.R, R/json-utils.R, R/json-vec.R
\name{has_fields.json_class}
\alias{has_fields.json_class}
\alias{has_subclass.json_class}
\alias{get_subclass.json_class}
\alias{has_fields}
\alias{has_fields.default}
\alias{has_subclass}
\alias{has_subclass.default}
\alias{get_subclass}
\alias{get_subclass.list}
\alias{remove_null}
\alias{has_fields.json_vec}
\alias{has_subclass.json_vec}
\alias{get_subclass.json_vec}
\title{JSON class utilities}
\usage{
\method{has_fields}{json_class}(x, fields, ...)

\method{has_subclass}{json_class}(x, class, ...)

\method{get_subclass}{json_class}(x)

has_fields(x, fields, ...)

\method{has_fields}{default}(x, ...)

has_subclass(x, class, ...)

\method{has_subclass}{default}(x, ...)

get_subclass(x)

\method{get_subclass}{list}(x, ...)

remove_null(x)

\method{has_fields}{json_vec}(x, fields, ...)

\method{has_subclass}{json_vec}(x, class, ...)

\method{get_subclass}{json_vec}(x, ...)
}
\arguments{
\item{x}{Object to test.}

\item{fields}{Character vector of nonzero length, holding the field names
for which to check.}

\item{...}{Generic compatibility.}

\item{class}{Character vector of nonzero length, holding the class names
to test for.}
}
\description{
The generic function \code{has_fields()} tests whether a single \code{json_class}
object contains all of the specified fields or whether each \code{json_class}
object contained in a \code{json_vec} object passes this test. If dispatch
occurs on an object that is neither of class \code{json_class}, nor of class
\code{json_vec}, \code{has_fields()} returns \code{FALSE}. In order to test whether a
\code{json_class} or a \code{json_vec}  object is of a certain sub-class (can also be
a vector of sub-classes), the generic function \code{has_subclass()} can be
used. Dispatch on any other type objects will return \code{FALSE}. The sub-class
of a \code{json_class} or a \code{json_vec}  object can be determined, using
\code{get_subclass}. This will also work if dispatched on a \code{list} of objects if
that list object passes \code{\link[=has_common_subclass]{has_common_subclass()}}.
}
\details{
The function \code{remove_null()} recursively removes all NULL fields from a
nested list structure while preserving \code{json_class} and \code{json_vec} class
attributes. This can be useful when fetching an object form openBIS and
subsequently using this object for a further query: whenever the object
returned by the first API call contains NULL fields, it is safer to remove
all of them, as in some cases this might cause an error in the following
API requests.
}
\examples{
obj_1 <- json_class(a = 1, b = 2, class = "foo")
obj_2 <- json_class(a = 3, b = 4, class = "foo")
obj_3 <- json_class(a = 3, c = 4, class = "foo")

has_fields(obj_1, "a")
has_fields(obj_1, c("a", "b"))

has_fields(c(obj_1, obj_2), "a")
has_fields(c(obj_1, obj_3), "a")
has_fields(c(obj_1, obj_3), c("a", "b"))

tmp <- json_class(a = json_class(b = "c", d = NULL, class = "foo"),
                  e = json_class(f = "g", class = "bar"),
                  h = NULL,
                  class = "foobar")
print(tmp, 2)
print(remove_null(tmp), 2)

}
