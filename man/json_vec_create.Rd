% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json-vec.R
\name{json_vec}
\alias{json_vec}
\alias{as_json_vec}
\alias{as.json_vec}
\alias{as_json_vec.json_vec}
\alias{as_json_vec.json_class}
\alias{as_json_vec.list}
\alias{as_json_vec.default}
\alias{as.list.json_vec}
\title{Construct JSON object vectors}
\usage{
json_vec(...)

as_json_vec(x, ...)

as.json_vec(x, ...)

\method{as_json_vec}{json_vec}(x, ...)

\method{as_json_vec}{json_class}(x, ...)

\method{as_json_vec}{list}(x, force = FALSE, ...)

\method{as_json_vec}{default}(x, force = FALSE, ...)

\method{as.list}{json_vec}(x, ...)
}
\arguments{
\item{...}{Individual \code{json_class} objects, or generic compatibility}

\item{x}{A single/list of \code{json_class} object(s), or other object to coerce}

\item{force}{Suppress error when casting an object to \code{json_vec} that
cannot be converted.}
}
\description{
\code{new_json_vec()} is a low-level constructor that takes a list of
\code{json_class} objects of the same sub-class. \code{json_vec()} constructs a
json_vec from individual json_class objects and \code{as_json_vec()}/
\code{as.json_vec()} is an S3 generic function that converts existing objects.
Applying \code{as.list()} to a \code{json_vec} object reverses the action of
\code{new_json_vec()} by removing all json vec related class information.
}
\examples{
a <- structure(list("a"), class = c("foo", "json_class"))
b <- structure(list("b"), class = c("foo", "json_class"))

json_vec(a, b)

as_json_vec(list(a, b))
as_json_vec(a)

}
