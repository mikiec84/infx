% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/url.R
\name{list_download_urls}
\alias{list_download_urls}
\alias{list_download_urls.character}
\alias{list_download_urls.DataSet}
\alias{list_download_urls.DatasetIdentifier}
\alias{list_download_urls.DatasetReference}
\alias{list_download_urls.FeatureVectorDatasetReference}
\alias{list_download_urls.FeatureVectorDatasetWellReference}
\alias{list_download_urls.ImageDatasetReference}
\alias{list_download_urls.MicroscopyImageReference}
\alias{list_download_urls.PlateImageReference}
\alias{list_download_urls.DataSetFileDTO}
\alias{list_datastores}
\alias{list_datastore_urls}
\alias{list_datastore_urls.NULL}
\alias{list_datastore_urls.character}
\alias{list_datastore_urls.DataSet}
\alias{list_datastore_urls.DatasetIdentifier}
\alias{list_datastore_urls.DatasetReference}
\alias{list_datastore_urls.FeatureVectorDatasetReference}
\alias{list_datastore_urls.FeatureVectorDatasetWellReference}
\alias{list_datastore_urls.ImageDatasetReference}
\alias{list_datastore_urls.MicroscopyImageReference}
\alias{list_datastore_urls.PlateImageReference}
\title{List data store servers and urls}
\usage{
list_download_urls(token, x, ...)

\method{list_download_urls}{character}(token, x, path, timeout = NA, ...)

\method{list_download_urls}{DataSet}(token, x, path, timeout = NA, ...)

\method{list_download_urls}{DatasetIdentifier}(token, x, path, timeout = NA,
  ...)

\method{list_download_urls}{DatasetReference}(token, x, path, timeout = NA,
  ...)

\method{list_download_urls}{FeatureVectorDatasetReference}(token, x, path,
  timeout = NA, ...)

\method{list_download_urls}{FeatureVectorDatasetWellReference}(token, x, path,
  timeout = NA, ...)

\method{list_download_urls}{ImageDatasetReference}(token, x, path,
  timeout = NA, ...)

\method{list_download_urls}{MicroscopyImageReference}(token, x, path,
  timeout = NA, ...)

\method{list_download_urls}{PlateImageReference}(token, x, path, timeout = NA,
  ...)

\method{list_download_urls}{DataSetFileDTO}(token, x, timeout = NA, ...)

list_datastores(token, ...)

list_datastore_urls(token, x = NULL, ...)

\method{list_datastore_urls}{NULL}(token, x, ...)

\method{list_datastore_urls}{character}(token, x, ...)

\method{list_datastore_urls}{DataSet}(token, x, ...)

\method{list_datastore_urls}{DatasetIdentifier}(token, x, ...)

\method{list_datastore_urls}{DatasetReference}(token, x, ...)

\method{list_datastore_urls}{FeatureVectorDatasetReference}(token, x, ...)

\method{list_datastore_urls}{FeatureVectorDatasetWellReference}(token, x, ...)

\method{list_datastore_urls}{ImageDatasetReference}(token, x, ...)

\method{list_datastore_urls}{MicroscopyImageReference}(token, x, ...)

\method{list_datastore_urls}{PlateImageReference}(token, x, ...)
}
\arguments{
\item{token}{Login token as created by \code{login_openbis()}.}

\item{x}{Object representing a (set of) dataset(s), e.g. a vector of dataset
codes, or a set of \code{DataSet}s or \code{DatasetIdentifier}s.}

\item{...}{Generic compatibility.}

\item{path}{A character vector of file paths within datasets.}

\item{timeout}{Time-span (in seconds) for which the file download link
should be valid.}
}
\description{
In order to download files from openBIS, download urls have to be generated
first, which can be done by calling \code{list_download_urls()}. This function
is used in \code{\link[=fetch_files]{fetch_files()}}, which iterates over the selected files, creating
download links and executing the downloads. All data store servers
registered to an openBIS instance are listed by \code{list_datastores()} and data
store server urls per data set can be queried by calling
\code{list_datastore_urls()}.
}
\details{
To specify files for which links are requested by \code{list_download_urls()},
both a data set code and a file path are required. Objects, apart from
character vectors of data set codes, that may be passed to identify the
data set therefore include \code{DataSet}, \code{DatasetIdentifier},
\code{DatasetReference}, \code{FeatureVectorDatasetReference},
\code{FeatureVectorDatasetWellReference}, \code{ImageDatasetReference},
\code{MicroscopyImageReference} and \code{PlateImageReference}. Additionally, dispatch
of \code{list_download_urls()} is possible on \code{DataSetFileDTO} objects which
contain both information on data set and file path of a file. A \code{timeout}
argument may be specified, determining how long (in seconds) the generated
url is valid for. If no specific timeout value is passed the url is valid
for what the openBIS documentation calls "a short time".

\code{list_datastore_urls()} as \code{list_download_urls()} ultimately requires a
character vector of data set codes to make the API call and therefore
dispatch is possible on, in addition to character vector, \code{DataSet},
\code{DatasetIdentifier}, \code{DatasetReference}, \code{FeatureVectorDatasetReference},
\code{FeatureVectorDatasetWellReference}, \code{ImageDatasetReference},
\code{MicroscopyImageReference} and \code{PlateImageReference} objects. Dispatch on
\code{NULL} requests the default data store server url. Data store sever url
related functionality is uninteresting for the InfectX set-up, as only a
single data store server exists, the url of which can be retrieved by a call
to \code{list_datastores()}.
}
\section{openBIS}{

\itemize{
\item \Sexpr{infx::docs_link("dsrg", "getDownloadUrlForFileForDataSet")}
\item \Sexpr{infx::docs_link("dsrg",
"getDownloadUrlForFileForDataSetWithTimeout")}
}


\itemize{
\item \Sexpr{infx::docs_link("gis", "listDataStores")}
}


\itemize{
\item \Sexpr{infx::docs_link("gis", "getDefaultPutDataStoreBaseURL")}
\item \Sexpr{infx::docs_link("gis", "tryGetDataStoreBaseURL")}
\item \Sexpr{infx::docs_link("gis", "getDataStoreBaseURLs")}
}
}

\examples{
\donttest{
  tok <- login_openbis("rdgr2014", "IXPubReview")
  
  # data store server information
  list_datastores(tok)

  # search for a cell profiler feature data set from plate KB2-03-1I
  search <- search_criteria(
    attribute_clause("type", "HCS_ANALYSIS_CELL_FEATURES_CC_MAT"),
    sub_criteria = search_sub_criteria(
      search_criteria(attribute_clause("code",
                                       "/INFECTX_PUBLISHED/KB2-03-1I")),
      type = "sample"
    )
  )
  ds <- search_openbis(tok, search)

  # list all files of this data set
  files <- list_files(tok, ds)
  # extract file paths
  file_paths <- get_field(files, "pathInDataSet")
  # select a file
  file_path <- file_paths[grepl("Count_Cells", file_paths)]

  # generate url
  list_download_urls(tok, ds, file_path)

  # generate url and download file
  dat <- read_mat_files(url(list_download_urls(tok, ds, file_path)[[1L]]))
  attributes(dat)
  str(as.integer(dat))

  # set timeout to 2 sec
  file_url <- list_download_urls(tok, ds, file_path, timeout = 2L)
  tmp <- read_mat_files(url(file_url[[1L]]))

  # let timeout expire
  file_url <- list_download_urls(tok, ds, file_path, timeout = 2L)
  Sys.sleep(3L)
  tmp <- read_mat_files(url(file_url[[1L]]))

  logout_openbis(tok)
}
}
