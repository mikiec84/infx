% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/file.R
\name{list_files}
\alias{list_files}
\alias{list_files.character}
\alias{list_files.DataSet}
\alias{list_files.DatasetIdentifier}
\alias{list_files.DatasetReference}
\alias{list_files.FeatureVectorDatasetReference}
\alias{list_files.FeatureVectorDatasetWellReference}
\alias{list_files.ImageDatasetReference}
\alias{list_files.MicroscopyImageReference}
\alias{list_files.PlateImageReference}
\alias{list_files.DataSetFileDTO}
\alias{fetch_files}
\alias{fetch_files.character}
\alias{fetch_files.DataSet}
\alias{fetch_files.DatasetIdentifier}
\alias{fetch_files.DatasetReference}
\alias{fetch_files.FeatureVectorDatasetReference}
\alias{fetch_files.FeatureVectorDatasetWellReference}
\alias{fetch_files.ImageDatasetReference}
\alias{fetch_files.MicroscopyImageReference}
\alias{fetch_files.PlateImageReference}
\alias{fetch_files.DataSetFileDTO}
\alias{fetch_files.FileInfoDssDTO}
\title{List and download files}
\usage{
list_files(token, x, ...)

\method{list_files}{character}(token, x, path = "", recursive = TRUE, ...)

\method{list_files}{DataSet}(token, x, path = "", recursive = TRUE, ...)

\method{list_files}{DatasetIdentifier}(token, x, path = "",
  recursive = TRUE, ...)

\method{list_files}{DatasetReference}(token, x, path = "", recursive = TRUE,
  ...)

\method{list_files}{FeatureVectorDatasetReference}(token, x, path = "",
  recursive = TRUE, ...)

\method{list_files}{FeatureVectorDatasetWellReference}(token, x, path = "",
  recursive = TRUE, ...)

\method{list_files}{ImageDatasetReference}(token, x, path = "",
  recursive = TRUE, ...)

\method{list_files}{MicroscopyImageReference}(token, x, path = "",
  recursive = TRUE, ...)

\method{list_files}{PlateImageReference}(token, x, path = "",
  recursive = TRUE, ...)

\method{list_files}{DataSetFileDTO}(token, x, ...)

fetch_files(token, x, ...)

\method{fetch_files}{character}(token, x, files = NULL, file_regex = NULL,
  ...)

\method{fetch_files}{DataSet}(token, x, files = NULL, file_regex = NULL,
  ...)

\method{fetch_files}{DatasetIdentifier}(token, x, files = NULL,
  file_regex = NULL, ...)

\method{fetch_files}{DatasetReference}(token, x, files = NULL,
  file_regex = NULL, ...)

\method{fetch_files}{FeatureVectorDatasetReference}(token, x, files = NULL,
  file_regex = NULL, ...)

\method{fetch_files}{FeatureVectorDatasetWellReference}(token, x,
  files = NULL, file_regex = NULL, ...)

\method{fetch_files}{ImageDatasetReference}(token, x, files = NULL,
  file_regex = NULL, ...)

\method{fetch_files}{MicroscopyImageReference}(token, x, files = NULL,
  file_regex = NULL, ...)

\method{fetch_files}{PlateImageReference}(token, x, files = NULL,
  file_regex = NULL, ...)

\method{fetch_files}{DataSetFileDTO}(token, x, n_con = 5L,
  finally = identity, ...)

\method{fetch_files}{FileInfoDssDTO}(token, x, data_sets = NULL, n_con = 5L,
  finally = identity, ...)
}
\arguments{
\item{token}{Login token as created by \code{login_openbis()}.}

\item{x}{Object to limit search for datasets/files with.}

\item{...}{Generic compatibility.}

\item{path}{A (vector of) file path(s) to be searched within a dataset.}

\item{recursive}{A (vector of) logicals, indicating whether to list files
recursively.}

\item{files}{Optional set of \code{FileInfoDssDTO} objects. If NULL, all files
corresponding to the specified datasets are assumed.}

\item{file_regex}{Regular expression applied to filenames.}

\item{n_con}{The number of simultaneous connections.}

\item{finally}{A function that is applied to the result of a successful
download.}

\item{data_sets}{Either a single dataset object (anything that has a
\code{dataset_code()} method) or a set of objects of the same length as \code{x}. If
\code{NULL} (default), each \code{FileInfoDssDTO} object passed as \code{x} is expected
to contain a \code{data_set} attribute.}
}
\description{
A dataset in openBIS represents a collection of files. The function
\code{list_files()} lists files associated with one or more datasets by
returning a set of \code{FileInfoDssDTO} objects. As this object type does not
contain information on data set association, the data set code is saved
as \code{data_set} attribute with each \code{FileInfoDssDTO} object. Data set files
can be fetched using \code{fetch_files()}, which can either retrieve all
associated files or use file path information, for example from
\code{FileInfoDssDTO} objects to only download a subset of files.
}
\details{
Data sets for \code{list_files()} can be specified as character vector of
dataset codes and therefore all objects for which the internal method
\code{dataset_code()} exists can be used to select datasets. This includes data
set and data set id objects as well as the various flavors of data set
reference objects. In addition to these dataset-representing objects,
dispatch on \code{DataSetFileDTO} objects is possible as well.

File listing can be limited to a certain path within the dataset and the
search can be carried out recursively or non-recursively. In case a set of
objects is passed, the search-tuning arguments \code{path} and \code{recursive} have
to be either of length 1 or of the same length as \code{x}. If dispatch occurs
on \code{DataSetFileDTO} objects, the \code{path} and \code{recursive} arguments are not
needed, as this information is already encoded in the objects passed as \code{x}.
A separate API call is necessary for each of the objects the dispatch
occurs on.

The function \code{fetch_files()} downloads files associated to a dataset. The
main object types to specify which files to download are either
\code{DataSetFileDTO} or \code{FileInfoDssDTO}. Whenever dispatch occurs on
\code{FileInfoDssDTO}, either a character vector of data set codes has to be
passed as \code{data_sets} argument to \code{fetch_files()} or each \code{FileInfoDssDTO}
object has to contain a \code{data_set} attribute.

Additionally, for convenience, \code{fetch_files()} can be dispatched on a set
of datasets (either specified as character vector or any object for which
the internal \code{dataset_code()} method exists, including data set and data
set id objects as well as data set reference objects), the set of files to be downloaded can either be passed as the
\code{files} argument or
all available files for that dataset are listed using \code{\link[=list_files]{list_files()}}
(folders themselves are removed), and this set of files is filtered if a
regular expression is passed as argument \code{file_regex}. The resulting set
of \code{FileInfoDssDTO} objects alongside the corresponding dataset ids are then
fetched, using \code{fetch_files()}. All named arguments passed as \code{...} are
forwarded to \code{\link[=list_files]{list_files()}} and the \code{FileInfoDssDTO}-specific
\code{fetch_files()} method.

In addition to datasets, dispatch can be on \code{FileInfoDssDTO} or
\code{DataSetFileDTO} objects. In case of \code{FileInfoDssDTO} objects being passed,
an additional character vector specifying the corresponding dataset ids is
required, as \code{FileInfoDssDTO} objects do not contain any dataset identifying
information. This character vector of dataset ids may be of length 1 or of
the same length as the number of \code{FileInfoDssDTO} objects. Finally,
\code{DataSetFileDTO} objects contain both path and dataset information so a
single object uniquely identifies a file in a dataset.

File fetching may be carried out in serial or in parallel fashion,
controlled by the \code{n_con} argument. If values \code{FALSE} or any integer \code{<= 1L}
are passed, downloads are performed non-concurrently and otherwise the
number of simultaneous connections is controlled by the integer passed as
\code{n_con}.

The actual file fetching is done by \code{fetch_files_serial}/
\code{fetch_files_parallel}, both of which accept a set of urls either as a
character vector or a list of \code{call} objects (see \code{\link[base:call]{base::call()}}). This is
because file urls in openBIS have a limited lifetime and therefore must be
used shortly after being created. In case a download fails, it is retried
again up to the number of times specified as \code{n_try}. A vector of file sizes
may be passed which is used to make sure the file was downloaded entirely.
Finally, a function with a single argument can be passed as the argument
\code{done}, which takes the downloaded data as input and does some processing.
}
\section{openBIS}{

\itemize{
\item \Sexpr{infx::docs_link("dsrg", "listFilesForDataSet")}
}
}

