% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/request.R
\name{make_requests}
\alias{make_requests}
\alias{make_request}
\alias{do_requests_serial}
\alias{do_requests_parallel}
\alias{process_json}
\alias{resolve_references}
\title{Make a JSON-RPC request}
\usage{
make_requests(urls, methods, params, ids = NULL, version = "2.0",
  n_con = 5L, ...)

make_request(url, method, params, ...)

do_requests_serial(urls, bodies, n_try = 1L,
  create_handle = create_request_handle, check = check_request_result,
  finally = process_json)

do_requests_parallel(urls, bodies, n_con = 5L, n_try = 1L,
  chunked = FALSE, create_handle = create_request_handle,
  check = check_request_result, finally = process_json)

process_json(x)

resolve_references(x)
}
\arguments{
\item{params}{A list structure holding the arguments which, converted to
JSON, will be used to call the supplied method. The \code{@type} entries will be
generated from \code{json_class} attributes.}

\item{ids}{Identifier(s) for the JSON-RPC request (defaults to a random
string of length 7). Can be usually be ignored, as only single JSON-RPC
requests are issued per HTTP request.}

\item{version}{JSON-RPC protocol version to be used (defaults to \code{"2.0"}.}

\item{n_con}{The number of simultaneous connections.}

\item{...}{Further arguments to \code{make_request()} are passed to
\code{make_requests()} and from \code{make_requests()} to \code{do_requests_*()}.}

\item{url, urls, }{Destination url(s), the request is sent to.}

\item{method, methods}{The API method name(s).}

\item{bodies}{Request bodies: a list where each entry is a list with slots
\code{id}, \code{jsonrpc}, \code{method} and \code{params}.}

\item{n_try}{Number of tries each request is performed in case of failed
requests.}

\item{create_handle}{A function that will receive a single entry of the
\code{bodies} list at the time and should return a curl handle created by
\code{\link[curl:new_handle]{curl::new_handle()}}.}

\item{check}{A function that receives both the result of a request and the
corresponding entry of the \code{bodies} list. Is expected to return NULL in
which case the request is retried or a list with an entry named \code{result}.}

\item{finally}{A function that is applied to the \code{result} entry of the list
returned by the \code{check} function.}

\item{chunked}{Flag indicating whether to add downloads in chunks or all at
once. Can be used for download links which expire, such that they are only
created shortly before they are consumed.}

\item{x}{A (possibly nested) list structure for which all \code{@type} fields
are turned into class attributes and \code{@id} fields are recursively removed.}
}
\description{
The function \code{make_requests()} (and a wrapper for single requests,
\code{make_request()}) issues one or several JSON-RPC request(s) to the specified
server. Urls can be either passed as a character vector or a list of calls
which will be evaluated using \code{\link[base:eval]{base::eval()}}. The urls for the various
openBIS endpoints can be constructed using the \code{\link[=api_url]{api_url()}} function.
}
\details{
If several requests are issued, these can be run asynchronously using
\code{do_requests_parallel()} or serially using \code{do_requests_serial()}, which
is controlled by the argument \code{n_con}, specifying the number of allowed
simultaneous connections. The arguments \code{methods} and \code{params}, as well as
the optional arguments \code{ids} and \code{version} are assembled into a list of
JSON-RPC request objects which are subsequently passed to \code{do_requests_*()}
along with all further arguments passed as \code{...}. These include \code{n_try},
specifying a maximum number of allowed retries for failed requests, as well
as \code{create_handle}, \code{check} and \code{finally}, which can be used to modify the
behavior of \code{do_requests_*()}.

All \code{@type} fields are converted to/from \code{json_class} attributes, using
\code{\link[=rm_json_class]{rm_json_class()}} and \code{\link[=as_json_class]{as_json_class()}}. Furthermore, as part of the
JSON-RPC specification, all objects returned form the API will have \code{@id}
fields, which may be referenced if an objects is used multiple times. The
helper function \code{resolve_references()} recursively resolves all references
such that each object is self-contained.
}
\examples{
\donttest{
  tok <- login_openbis("rdgr2014", "IXPubReview")
  projects <- make_request(api_url("gis"), "listProjects", list(token))
  print(projects[[1]])
}

}
