% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/json-class.R
\name{is_json_class}
\alias{is_json_class}
\alias{is.json_class}
\alias{check_json_class}
\alias{has_subclass}
\alias{has_subclass.json_class}
\alias{has_subclass.default}
\alias{get_subclass}
\alias{get_subclass.json_class}
\title{Validate JSON class objects}
\usage{
is_json_class(x)

is.json_class(x)

check_json_class(x, recursive = TRUE)

has_subclass(x, class, ...)

\method{has_subclass}{json_class}(x, class, ...)

\method{has_subclass}{default}(x, class, ...)

get_subclass(x)

\method{get_subclass}{json_class}(x)
}
\arguments{
\item{x}{Object to process.}

\item{recursive}{Recursively apply the function.}

\item{class}{JSON sub-class name.}

\item{...}{Generic compatibility.}
}
\description{
The functions \code{is_json_class()} and \code{has_subclass()} test whether an
object is a JSON class object. The former tests whether an object is a
proper \code{json_class} object, meaning that:
\itemize{
\item it is a list
\item it inherits \code{json_class}
\item the last class attribute is \code{json_class}
\item apart from \code{json_class} there exists at least one more class attribute
The latter function tests whether an object has a specific JSON class
attached. In order to recursively test a \code{json_class} object for being
properly formed, the function \code{check_json_class()} can be used. In order to
retrieve the sub-class to a \code{json_class} object, \code{get_subclass()} can
be used.
}
}
\examples{
lst <- list(`@type` = "foo", "a", "b")
cls <- as_json_class(lst)

print(cls)
is_json_class(cls)
get_subclass(cls)

identical(rm_json_class(cls), lst)

}
